cmake_minimum_required(VERSION 3.19.0)
project(
	NSFemSolver
	VERSION 0.1.0
	DESCRIPTION "Finite element method solver for the Navier-Stokes equations." 
)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(
	WITH_ADDRESS_SANITIZER
	OFF CACHE BOOL
	"If ON the project will be compiled with address sanitizer (it will run slow). For now it's clang only"
)

set(
	WITH_CPU_PROFILER
	OFF CACHE BOOL
	"If ON additional compiler flags will be set so that the executable could be profiled with perf"
)

if(${WITH_ADDRESS_SANITIZER})
	if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
		set(_sanitizer_flags "-g -fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls -O0")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${_sanitizer_flags}")
		set(CMAKE_CXX_EXE_LINKER_FLAGS "${CMAKE_CXX_EXE_LINKER_FLAGS} ${_sanitizer_flags}")
		unset(_sanitizer_flags)
	else()
		message(ERROR "Address sanitizing is supported only for Clang and GCC")
	endif()
endif()

# Path to where <package>-confng.cmake files generated by conan cmake_find_package are located
if(NOT DEFINED CMAKE_PREFIX_PATH)
	set(CMAKE_PREFIX_PATH ${CMAKE_BINARY_DIR})
endif()

find_package(sparse_matrix_math 0.2.0 REQUIRED CONFIG)
find_package(cpp_tm 0.2.0 REQUIRED CONFIG)
find_package(nlohmann_json REQUIRED CONFIG)

set(CPP
	cpp/main.cpp
	cpp/grid.cpp
	cpp/expression.cpp
	cpp/error_code.cpp
	cpp/assembly.cpp
	cpp/kd_tree.cpp
)

set(HEADERS
	include/grid.h
	include/assembly.h
	include/static_matrix.h
	include/expression.h
	include/error_code.h
	include/kd_tree.h
)

add_executable(${PROJECT_NAME} ${CPP} ${HEADERS})

find_package(OpenCV REQUIRED CONFIG)

target_include_directories(${PROJECT_NAME} PRIVATE include)
target_link_libraries(${PROJECT_NAME} INTERFACE sparse_matrix_math::sparse_matrix_math cpp_tm::cpp_tm)
target_link_libraries(${PROJECT_NAME} PRIVATE nlohmann_json::nlohmann_json opencv::opencv)

if(NOT MSVC)
	target_compile_options(${PROJECT_NAME} PRIVATE 
		-Wall -Wextra -pedantic $<$<CONFIG:DEBUG>:-fno-limit-debug-info> -fno-exceptions -fno-rtti
	)
endif()

if(${WITH_GBENCH})
	find_package(benchmark REQUIRED CONFIG)
	target_link_libraries(${PROJECT_NAME} PRIVATE benchmark::benchmark)
endif()

if(${WITH_CPU_PROFILER})
	target_compile_options(${PROJECT_NAME} PRIVATE -fno-omit-frame-pointer -g)
endif()